// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Project {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  items     ProjectItem[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ProjectItem {
  id           Int           @id @default(autoincrement())
  name         String
  project      Project       @relation(fields: [projectId], references: [id])
  projectId    Int
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Customer {
  id           Int           @id @default(autoincrement())
  customerName String
  mobile       Int           @unique
  email        String?       @unique
  creditLimit  Decimal
  isBlocked    Boolean
  transactions Transaction[]
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id            Int         @id @default(autoincrement())
  raisedDate    DateTime
  dueDate       DateTime
  description   String
  total_amount  Decimal
  discount      Decimal
  total         Decimal
  summary       String
  status        Boolean
  Customer      Customer    @relation(fields: [customerId], references: [id])
  customerId    Int
  ProjectItem   ProjectItem @relation(fields: [projectItemId], references: [id])
  projectItemId Int
  payments      Payment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PaymentType {
  id Int @id @default(autoincrement())
}

model Payment {
  id            Int          @id @default(autoincrement())
  customerId    Int
  Customer      Customer     @relation(fields: [customerId], references: [id])
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?
  remarks       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
